#!/usr/bin/env bash

#
# git-good-commit(1) - Git hook to help you write good commit messages.
# Released under the MIT License.
#
# Version 0.6.2
#
# https://github.com/tommarshall/git-good-commit

# Custom validation by innovatio#12 by @sakona @oudom @bunhok @saksothea @marady

COMMIT_MSG_FILE="$1"
COMMIT_MSG_LINES=
HOOK_EDITOR=
SKIP_DISPLAY_WARNINGS=0
WARNINGS=

RED=
YELLOW=
BLUE=
WHITE=
NC=

#
# Set colour variables if the output should be coloured.
#

set_colors() {
  local default_color=$(git config --get hooks.goodcommit.color || git config --get color.ui || echo 'auto')
  if [[ $default_color ]]; then
    RED='\033[1;31m'
    YELLOW='\033[1;33m'
    BLUE='\033[1;34m'
    WHITE='\033[1;37m'
    NC='\033[0m' # No Color
  fi
}

#
# Set the hook editor, using the same approach as git.
#

set_editor() {
  # $GIT_EDITOR appears to always be set to `:` when the hook is executed by Git?
  # ref: http://stackoverflow.com/q/41468839/885540
  # ref: https://github.com/tommarshall/git-good-commit/issues/11
  # HOOK_EDITOR=$GIT_EDITOR
  test -z "${HOOK_EDITOR}" && HOOK_EDITOR=$(git config --get core.editor)
  test -z "${HOOK_EDITOR}" && HOOK_EDITOR=$VISUAL
  test -z "${HOOK_EDITOR}" && HOOK_EDITOR=$EDITOR
  test -z "${HOOK_EDITOR}" && HOOK_EDITOR='vi'
}

#
# Output prompt help information.
#

prompt_help() {
  echo -e "${RED}$(cat <<-EOF
e - edit commit message
n - abort commit
? - print help
EOF
)${NC}"
}

#
# Add a warning with <line_number> and <msg>.
#

add_warning() {
  local line_number=$1
  local warning=$2
  WARNINGS[$line_number]="${WARNINGS[$line_number]}$warning;"
}

#
# Output warnings.
#

display_warnings() {
  if [ $SKIP_DISPLAY_WARNINGS -eq 1 ]; then
    # if the warnings were skipped then they should be displayed next time
    SKIP_DISPLAY_WARNINGS=0
    return
  fi

  for i in "${!WARNINGS[@]}"; do
    printf "%-74s ${WHITE}%s${NC}\n" "${COMMIT_MSG_LINES[$(($i-1))]}" "[line ${i}]"
    IFS=';' read -ra WARNINGS_ARRAY <<< "${WARNINGS[$i]}"
    for ERROR in "${WARNINGS_ARRAY[@]}"; do
      echo -e " ${YELLOW}- ${ERROR}${NC}"
    done
  done
}

#
# Read the contents of the commit msg into an array of lines.
#

read_commit_message() {
  # reset commit_msg_lines
  COMMIT_MSG_LINES=()

  # read commit message into lines array
  while IFS= read -r; do

    # trim trailing spaces from commit lines
    shopt -s extglob
    REPLY="${REPLY%%*( )}"
    shopt -u extglob

    # ignore comments
    [[ $REPLY =~ ^# ]]
    test $? -eq 0 || COMMIT_MSG_LINES+=("$REPLY")

  done < <(cat $COMMIT_MSG_FILE)
}

#
# Validate the contents of the commmit msg agains the good commit guidelines.
#

validate_commit_message() {
  # reset warnings
  WARNINGS=()

  # capture the subject, and remove the 'squash! ' prefix if present
  COMMIT_SUBJECT=${COMMIT_MSG_LINES[0]/#squash! /}

  # if the commit is empty there's nothing to validate, we can return here
  COMMIT_MSG_STR="${COMMIT_MSG_LINES[*]}"
  test -z "${COMMIT_MSG_STR[*]// }" && return;

  # if the commit subject starts with 'fixup! ' there's nothing to validate, we can return here
  #[[ $COMMIT_SUBJECT == ^\[[A-Z]\]* ]] && return;

  # 1. Do not start the subject line with whitespace
  # ------------------------------------------------------------------------------

  [[ ${COMMIT_SUBJECT} =~ ^[[:blank:]]+ ]]
  test $? -eq 1 || add_warning 1 "Do not start the subject line with whitespace"

  # 2. Check if commit subject has valid prefix
  #---------------------------------------------------------------------------------

  if ! [[ ${COMMIT_SUBJECT} =~ ^(\[!!!\])?(\[WIP\])?(WIP\:)?\[(FEATURE|BUGFIX|RFT|IMP|DOC|TASK|SECURITY|ci INFRA|ci SEED_JOB)\]  ]]; then
    add_warning 1 "Please enter valid prefix in the subject line, \r\nAvailable prefixes: FEATURE|BUGFIX|RFT|IMP|DOC|TASK|SECURITY|ci INFRA|ci SEED_JOB \n\re.g [TASK] Add a file"
  fi

  # 3. Subject should start with CAPITAL letter after prefix
  [[ ${COMMIT_SUBJECT} =~ ^(\[!!!\])?(\[WIP\])?(WIP\:)?\[(ci[[:blank:]]{1})?[A-Z_]+\][[:blank:]]{1}[A-Z]{1}+ ]]
  test $? -eq 0 || add_warning 1 "Subject should start with CAPITAL letter and a whitespace after prefix"

  # 4. A new line between subject and description
  # ------------------------------------------------------------------------------

  test ${#COMMIT_MSG_LINES[@]} -lt 1 || test -z "${COMMIT_MSG_LINES[1]}"
  test $? -eq 0 || add_warning 1 "A new line between subject and description"

  # 5. Limit the subject line to 50 characters
  # ------------------------------------------------------------------------------

  test "${#COMMIT_SUBJECT}" -le 50
  test $? -eq 0 || add_warning 1 "Limit the subject line to 50 characters (${#COMMIT_SUBJECT} chars)"

  # 6. Do not end the subject line with a period (.)
  # ------------------------------------------------------------------------------

  [[ ${COMMIT_SUBJECT} =~ [^\.]$ ]]
  test $? -eq 0 || add_warning 1 "Do not end the subject line with a period (.)"

  # 7. Use the Present tense in the subject line
  # ------------------------------------------------------------------------------

  IMPERATIVE_MOOD_BLACKLIST=(
    added          adds          adding
    avoided        avoids        avoiding
    amended        amends        amending
    bumped         bumps         bumping
    changed        changes       changing
    checked        checks        checking
    committed      commits       committing
    copied         copies        copying
    corrected      corrects      correcting
    created        creates       creating
    compared       compares      comparing
    deleted        deletes       deleting
    fixed          fixes         fixing
    implemented    implements    implementing
    improved       improves      improving
    introduced     introduces    introducing
    moved          moves         moving
    modified       modifies      modifying
    maked          makes         making
    pruned         prunes        pruning
    refactored     refactors     refactoring
    removed        removes       removing
    renamed        renames       renaming
    replaced       replaces      replacing
    resolved       resolves      resolving
    showed         shows         showing
    tested         tests         testing
    updated        updates       updating
    used           uses          using
  )

  # enable case insensitive match
  shopt -s nocasematch

  for BLACKLISTED_WORD in "${IMPERATIVE_MOOD_BLACKLIST[@]}"; do
    [[ ${COMMIT_SUBJECT} =~ ^(\[!!!\])?(\[WIP\])?(WIP\:)?\[(ci[[:blank:]]{1})?[A-Z_]+\][[:blank:]]{1}$BLACKLISTED_WORD ]]
    test $? -eq 0 && add_warning 1 "Use the present tense in the subject line, e.g 'fix' not 'fixes'" && break
  done

  # disable case insensitive match
  shopt -u nocasematch

  # 8. Limit the description to 72 characters
  #-------------------------------------------------------------------------------

    URL_REGEX='^[[:blank:]]*(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'

    HAS_REFS=false
    for i in "${!COMMIT_MSG_LINES[@]}"; do
      LINE_NUMBER=$((i+1))
      test "${#COMMIT_MSG_LINES[$i]}" -le 72 || [[ ${COMMIT_MSG_LINES[$i]} =~ $URL_REGEX  ]]
      test $? -eq 0 || add_warning $LINE_NUMBER "Limit the description to 72 characters (${#COMMIT_MSG_LINES[$i]} chars)"
      if [[ ${COMMIT_MSG_LINES[$i]} =~ ^refs[[:blank:]]{1}[A-Z]+\-[0-9]+  ]] ; then
        HAS_REFS=true
      fi
    done

  # 9. Check ticket referencing e.g refs QA-10
  #-----------------------------------------------------------------------------

  if [ "${HAS_REFS}" = false  ] ; then
    add_warning ${#COMMIT_MSG_LINES[@]} "Your commit message does not have Ticket Referencing, e.g 'refs QA-10'"
  fi

  # 10. Do not write single-worded commits
  # ------------------------------------------------------------------------------

  COMMIT_SUBJECT_WORDS=(${COMMIT_SUBJECT})
  test "${#COMMIT_SUBJECT_WORDS[@]}" -gt 1
  test $? -eq 0 || add_warning 1 "Do not write single-worded commits"
}

#
# It's showtime.
#

set_colors

set_editor

if tty >/dev/null 2>&1; then
  TTY=$(tty)
else
  TTY=/dev/tty
fi

while true; do

  read_commit_message

  validate_commit_message

  # if there are no WARNINGS are empty then we're good to break out of here
  test ${#WARNINGS[@]} -eq 0 && exit 0;

  display_warnings

  # Ask the question (not using "read -p" as it uses stderr not stdout)
  echo -en "${BLUE}Proceed with commit? [e/n/?] ${NC}"

  # Read the answer
  read REPLY < "$TTY"

  # Check if the reply is valid
  case "$REPLY" in
    E*|e*) $HOOK_EDITOR "$COMMIT_MSG_FILE" < $TTY; continue ;;
    N*|n*) exit 1 ;;
    *)     SKIP_DISPLAY_WARNINGS=1; prompt_help; continue ;;
  esac

done
